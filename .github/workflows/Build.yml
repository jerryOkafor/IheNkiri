name: Build, Test & Check

on:
  push:
    branches:
      - main
    pull_request:

    paths:
      - "!docs/**"
      - "!doc/**"
      - ".github/workflows/Build.yml"

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  verify_code_quality:
    name: Verify Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Copy CI gradle.properties
        run: mkdir -p ~/.gradle ; cp ci-cd/ci-gradle.properties ~/.gradle/gradle.properties

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Verify Code Quality
        run: ./gradlew detekt ktlintCheck

  build_test_check:
    name: Build,Test & Check
    needs: verify_code_quality
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Copy CI gradle.properties
        run: mkdir -p ~/.gradle ; cp ci-cd/ci-gradle.properties ~/.gradle/gradle.properties

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build all build type and flavor permutations
        run: ./gradlew assemble

        #      - name: Run all local screenshot tests (Roborazzi)
        #        id: screenshotsverify
        #        continue-on-error: true
        #        run: ./gradlew :screenshotTest:verifyRoborazziDebug

        #Add more codes

      - name: Check lint
        run: ./gradlew lintDebug

      - name: Run local tests with coverage
        run: ./gradlew testDebugUnitTest

      - name: Generate androidTest Coverage Report
        run: ./gradlew jacocoTestCoverageReport

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: "**/build/reports/jacoco/test*UnitTestCoverage/**.xml"
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  #      - name: Upload build outputs (APKs)
  #        uses: actions/upload-artifact@v3
  #        with:
  #          name: APKs
  #          path: '**/build/outputs/apk/**/*.apk'
  #
  #      - name: Upload lint reports (HTML)
  #        if: always()
  #        uses: actions/upload-artifact@v3
  #        with:
  #          name: lint-reports
  #          path: '**/build/reports/lint-results-*.html'
  #
  #      - name: Upload test results (XML)
  #        if: always()
  #        uses: actions/upload-artifact@v3
  #        with:
  #          name: test-results
  #          path: '**/build/test-results/test*UnitTest/**.xml'


  android_test:
    name: Android Tests
    needs: [ verify_code_quality,build_test_check ]
    runs-on: macOS-latest # enables hardware acceleration in the virtual machine
    timeout-minutes: 55
    strategy:
      matrix:
        api-level: [ 26, 30 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Copy CI gradle.properties
        run: mkdir -p ~/.gradle ; cp ci-cd/ci-gradle.properties ~/.gradle/gradle.properties

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build AndroidTest apps
        run: ./gradlew -Pcoverage assembleDebug assembleDebugAndroidTest --daemon

      - name: Run instrumentation tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: x86_64
          disable-animations: true
          disk-size: 6000M
          heap-size: 600M
          script: ./gradlew :androidTest:connectedDebugAndroidTest --daemon

      - name: Run all local screenshot tests (Roborazzi)
        id: verify-screen-shorts
        continue-on-error: true
        run: ./gradlew verifyRoborazziDebug

      - name: Generate androidTest Coverage Report
        run: ./gradlew jacocoTestCoverageReport

      #      - name: Verify androidTest Coverage report # This will fail if the coverage it not up to the set threshold
      #        run: ./gradlew jacocoTestCoverageVerification

      #      - name: Upload test reports
      #        if: always()
      #        uses: actions/upload-artifact@v3
      #        with:
      #          name: test-reports-${{ matrix.api-level }}
      #          path: '**/build/reports/androidTests'


      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: "**/build/reports/jacoco/test*UnitTestCoverage/**.xml"
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}